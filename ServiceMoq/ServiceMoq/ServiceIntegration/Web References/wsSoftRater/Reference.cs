//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ServiceIntegration.wsSoftRater {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SoftRaterWSSoap11HttpPortBinding", Namespace="http://com.oracle.ins.ru.sr.ui.webservices")]
    public partial class SoftRaterWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ProcessIBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveAsyncRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRequestFromDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRequestFromDbOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRequestCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRequestCustomFromDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearCacheItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryAvailableEnvironmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getErrorMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefaultPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SoftRaterWS() {
            this.Url = global::ServiceIntegration.Properties.Settings.Default.ServiceIntegration_wsSoftRater_SoftRaterWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessIBCompletedEventHandler ProcessIBCompleted;
        
        /// <remarks/>
        public event ProcessRequestCompletedEventHandler ProcessRequestCompleted;
        
        /// <remarks/>
        public event ReceiveAsyncRequestCompletedEventHandler ReceiveAsyncRequestCompleted;
        
        /// <remarks/>
        public event ProcessRequestFromDiskCompletedEventHandler ProcessRequestFromDiskCompleted;
        
        /// <remarks/>
        public event ProcessRequestFromDbCompletedEventHandler ProcessRequestFromDbCompleted;
        
        /// <remarks/>
        public event ProcessCustomCompletedEventHandler ProcessCustomCompleted;
        
        /// <remarks/>
        public event ProcessRequestCustomCompletedEventHandler ProcessRequestCustomCompleted;
        
        /// <remarks/>
        public event ProcessRequestCustomFromDiskCompletedEventHandler ProcessRequestCustomFromDiskCompleted;
        
        /// <remarks/>
        public event ClearCacheItemCompletedEventHandler ClearCacheItemCompleted;
        
        /// <remarks/>
        public event QueryAvailableEnvironmentsCompletedEventHandler QueryAvailableEnvironmentsCompleted;
        
        /// <remarks/>
        public event SaveMappingCompletedEventHandler SaveMappingCompleted;
        
        /// <remarks/>
        public event getErrorMessageCompletedEventHandler getErrorMessageCompleted;
        
        /// <remarks/>
        public event getDefaultPathCompletedEventHandler getDefaultPathCompleted;
        
        /// <remarks/>
        public event getVersionCompletedEventHandler getVersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessIB([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aInStyle, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDoDebugOutput) {
            object[] results = this.Invoke("ProcessIB", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aInStyle,
                        aDoDebugOutput});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessIBAsync(string aXMLInput, bool aAddRoot, bool aAddInputs, bool aAddHeading, bool aAddResultDesc, bool aAddResultThatAreEmpty, bool aInStyle, bool aDoDebugOutput) {
            this.ProcessIBAsync(aXMLInput, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aInStyle, aDoDebugOutput, null);
        }
        
        /// <remarks/>
        public void ProcessIBAsync(string aXMLInput, bool aAddRoot, bool aAddInputs, bool aAddHeading, bool aAddResultDesc, bool aAddResultThatAreEmpty, bool aInStyle, bool aDoDebugOutput, object userState) {
            if ((this.ProcessIBOperationCompleted == null)) {
                this.ProcessIBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessIBOperationCompleted);
            }
            this.InvokeAsync("ProcessIB", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aInStyle,
                        aDoDebugOutput}, this.ProcessIBOperationCompleted, userState);
        }
        
        private void OnProcessIBOperationCompleted(object arg) {
            if ((this.ProcessIBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessIBCompleted(this, new ProcessIBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessRequest(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddWorksheet, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aInMemoryBatch, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aProcessAsync) {
            object[] results = this.Invoke("ProcessRequest", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInMemoryBatch,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRequestAsync(
                    string aXMLInput, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aInMemoryBatch, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync) {
            this.ProcessRequestAsync(aXMLInput, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aAddWorksheet, aDoDebugOutput, aDisableCache, aTargetEnvironment, aUseResultEncoding, aUseResultDefinition, aInMemoryBatch, aAddInputsToDb, aAddResultsToDb, aProcessAsync, null);
        }
        
        /// <remarks/>
        public void ProcessRequestAsync(
                    string aXMLInput, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aInMemoryBatch, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync, 
                    object userState) {
            if ((this.ProcessRequestOperationCompleted == null)) {
                this.ProcessRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestOperationCompleted);
            }
            this.InvokeAsync("ProcessRequest", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInMemoryBatch,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync}, this.ProcessRequestOperationCompleted, userState);
        }
        
        private void OnProcessRequestOperationCompleted(object arg) {
            if ((this.ProcessRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRequestCompleted(this, new ProcessRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReceiveAsyncRequest([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aIbDocId) {
            object[] results = this.Invoke("ReceiveAsyncRequest", new object[] {
                        aIbDocId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveAsyncRequestAsync(string aIbDocId) {
            this.ReceiveAsyncRequestAsync(aIbDocId, null);
        }
        
        /// <remarks/>
        public void ReceiveAsyncRequestAsync(string aIbDocId, object userState) {
            if ((this.ReceiveAsyncRequestOperationCompleted == null)) {
                this.ReceiveAsyncRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveAsyncRequestOperationCompleted);
            }
            this.InvokeAsync("ReceiveAsyncRequest", new object[] {
                        aIbDocId}, this.ReceiveAsyncRequestOperationCompleted, userState);
        }
        
        private void OnReceiveAsyncRequestOperationCompleted(object arg) {
            if ((this.ReceiveAsyncRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveAsyncRequestCompleted(this, new ReceiveAsyncRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessRequestFromDisk(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLResult, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddWorksheet, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDeleteInputXmlFromDisk, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aProcessAsync) {
            object[] results = this.Invoke("ProcessRequestFromDisk", new object[] {
                        aXMLInput,
                        aXMLResult,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aDeleteInputXmlFromDisk,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRequestFromDiskAsync(
                    string aXMLInput, 
                    string aXMLResult, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aDeleteInputXmlFromDisk, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync) {
            this.ProcessRequestFromDiskAsync(aXMLInput, aXMLResult, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aAddWorksheet, aDoDebugOutput, aDisableCache, aTargetEnvironment, aUseResultEncoding, aUseResultDefinition, aDeleteInputXmlFromDisk, aAddInputsToDb, aAddResultsToDb, aProcessAsync, null);
        }
        
        /// <remarks/>
        public void ProcessRequestFromDiskAsync(
                    string aXMLInput, 
                    string aXMLResult, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aDeleteInputXmlFromDisk, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync, 
                    object userState) {
            if ((this.ProcessRequestFromDiskOperationCompleted == null)) {
                this.ProcessRequestFromDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestFromDiskOperationCompleted);
            }
            this.InvokeAsync("ProcessRequestFromDisk", new object[] {
                        aXMLInput,
                        aXMLResult,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aDeleteInputXmlFromDisk,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync}, this.ProcessRequestFromDiskOperationCompleted, userState);
        }
        
        private void OnProcessRequestFromDiskOperationCompleted(object arg) {
            if ((this.ProcessRequestFromDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRequestFromDiskCompleted(this, new ProcessRequestFromDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessRequestFromDb(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInputBatchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInputRefId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLResultBatchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInputVersionOverride, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddWorksheet, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetSubscriber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aIncludeResultsInResponse, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aProcessAsync) {
            object[] results = this.Invoke("ProcessRequestFromDb", new object[] {
                        aXMLInputBatchId,
                        aXMLInputRefId,
                        aXMLResultBatchId,
                        aXMLInputVersionOverride,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetSubscriber,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aIncludeResultsInResponse,
                        aProcessAsync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRequestFromDbAsync(
                    string aXMLInputBatchId, 
                    string aXMLInputRefId, 
                    string aXMLResultBatchId, 
                    string aXMLInputVersionOverride, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetSubscriber, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aIncludeResultsInResponse, 
                    bool aProcessAsync) {
            this.ProcessRequestFromDbAsync(aXMLInputBatchId, aXMLInputRefId, aXMLResultBatchId, aXMLInputVersionOverride, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aAddWorksheet, aDoDebugOutput, aDisableCache, aTargetSubscriber, aTargetEnvironment, aUseResultEncoding, aUseResultDefinition, aIncludeResultsInResponse, aProcessAsync, null);
        }
        
        /// <remarks/>
        public void ProcessRequestFromDbAsync(
                    string aXMLInputBatchId, 
                    string aXMLInputRefId, 
                    string aXMLResultBatchId, 
                    string aXMLInputVersionOverride, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetSubscriber, 
                    string aTargetEnvironment, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    bool aIncludeResultsInResponse, 
                    bool aProcessAsync, 
                    object userState) {
            if ((this.ProcessRequestFromDbOperationCompleted == null)) {
                this.ProcessRequestFromDbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestFromDbOperationCompleted);
            }
            this.InvokeAsync("ProcessRequestFromDb", new object[] {
                        aXMLInputBatchId,
                        aXMLInputRefId,
                        aXMLResultBatchId,
                        aXMLInputVersionOverride,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetSubscriber,
                        aTargetEnvironment,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aIncludeResultsInResponse,
                        aProcessAsync}, this.ProcessRequestFromDbOperationCompleted, userState);
        }
        
        private void OnProcessRequestFromDbOperationCompleted(object arg) {
            if ((this.ProcessRequestFromDbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRequestFromDbCompleted(this, new ProcessRequestFromDbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessCustom(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aLOB, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aCompanyId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aProgramId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] float aProgramVersion, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aInputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aInputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aOutputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aOutputMappingStateful, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputErrorXpathLoc) {
            object[] results = this.Invoke("ProcessCustom", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessCustomAsync(
                    string aXMLInput, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc) {
            this.ProcessCustomAsync(aXMLInput, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aDoDebugOutput, aDisableCache, aTargetEnvironment, aLOB, aCompanyId, aProgramId, aProgramVersion, aUseResultEncoding, aUseResultDefinition, aInputMappingType, aInputMappingIdentifier, aOutputMappingType, aOutputMappingIdentifier, aOutputMappingStateful, aOutputErrorXpathLoc, null);
        }
        
        /// <remarks/>
        public void ProcessCustomAsync(
                    string aXMLInput, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc, 
                    object userState) {
            if ((this.ProcessCustomOperationCompleted == null)) {
                this.ProcessCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessCustomOperationCompleted);
            }
            this.InvokeAsync("ProcessCustom", new object[] {
                        aXMLInput,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc}, this.ProcessCustomOperationCompleted, userState);
        }
        
        private void OnProcessCustomOperationCompleted(object arg) {
            if ((this.ProcessCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessCustomCompleted(this, new ProcessCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessRequestCustom(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInputTag, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddWorksheet, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aLOB, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aCompanyId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aProgramId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] float aProgramVersion, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aInputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aInputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aOutputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aOutputMappingStateful, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputErrorXpathLoc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aInMemoryBatch, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aProcessAsync) {
            object[] results = this.Invoke("ProcessRequestCustom", new object[] {
                        aXMLInput,
                        aXMLInputTag,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc,
                        aInMemoryBatch,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRequestCustomAsync(
                    string aXMLInput, 
                    string aXMLInputTag, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc, 
                    bool aInMemoryBatch, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync) {
            this.ProcessRequestCustomAsync(aXMLInput, aXMLInputTag, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aAddWorksheet, aDoDebugOutput, aDisableCache, aTargetEnvironment, aLOB, aCompanyId, aProgramId, aProgramVersion, aUseResultEncoding, aUseResultDefinition, aInputMappingType, aInputMappingIdentifier, aOutputMappingType, aOutputMappingIdentifier, aOutputMappingStateful, aOutputErrorXpathLoc, aInMemoryBatch, aAddInputsToDb, aAddResultsToDb, aProcessAsync, null);
        }
        
        /// <remarks/>
        public void ProcessRequestCustomAsync(
                    string aXMLInput, 
                    string aXMLInputTag, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc, 
                    bool aInMemoryBatch, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync, 
                    object userState) {
            if ((this.ProcessRequestCustomOperationCompleted == null)) {
                this.ProcessRequestCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestCustomOperationCompleted);
            }
            this.InvokeAsync("ProcessRequestCustom", new object[] {
                        aXMLInput,
                        aXMLInputTag,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc,
                        aInMemoryBatch,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync}, this.ProcessRequestCustomOperationCompleted, userState);
        }
        
        private void OnProcessRequestCustomOperationCompleted(object arg) {
            if ((this.ProcessRequestCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRequestCustomCompleted(this, new ProcessRequestCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProcessRequestCustomFromDisk(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLInputTag, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aXMLResult, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddRoot, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddHeading, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultDesc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultThatAreEmpty, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddWorksheet, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aDoDebugOutput, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDisableCache, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aLOB, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aCompanyId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aProgramId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] float aProgramVersion, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aUseResultEncoding, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aUseResultDefinition, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aInputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aInputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aOutputMappingType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputMappingIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aOutputMappingStateful, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aOutputErrorXpathLoc, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aDeleteInputXmlFromDisk, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddInputsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aAddResultsToDb, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool aProcessAsync) {
            object[] results = this.Invoke("ProcessRequestCustomFromDisk", new object[] {
                        aXMLInput,
                        aXMLInputTag,
                        aXMLResult,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc,
                        aDeleteInputXmlFromDisk,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRequestCustomFromDiskAsync(
                    string aXMLInput, 
                    string aXMLInputTag, 
                    string aXMLResult, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc, 
                    bool aDeleteInputXmlFromDisk, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync) {
            this.ProcessRequestCustomFromDiskAsync(aXMLInput, aXMLInputTag, aXMLResult, aAddRoot, aAddInputs, aAddHeading, aAddResultDesc, aAddResultThatAreEmpty, aAddWorksheet, aDoDebugOutput, aDisableCache, aTargetEnvironment, aLOB, aCompanyId, aProgramId, aProgramVersion, aUseResultEncoding, aUseResultDefinition, aInputMappingType, aInputMappingIdentifier, aOutputMappingType, aOutputMappingIdentifier, aOutputMappingStateful, aOutputErrorXpathLoc, aDeleteInputXmlFromDisk, aAddInputsToDb, aAddResultsToDb, aProcessAsync, null);
        }
        
        /// <remarks/>
        public void ProcessRequestCustomFromDiskAsync(
                    string aXMLInput, 
                    string aXMLInputTag, 
                    string aXMLResult, 
                    bool aAddRoot, 
                    bool aAddInputs, 
                    bool aAddHeading, 
                    bool aAddResultDesc, 
                    bool aAddResultThatAreEmpty, 
                    bool aAddWorksheet, 
                    int aDoDebugOutput, 
                    bool aDisableCache, 
                    string aTargetEnvironment, 
                    int aLOB, 
                    int aCompanyId, 
                    int aProgramId, 
                    float aProgramVersion, 
                    int aUseResultEncoding, 
                    string aUseResultDefinition, 
                    short aInputMappingType, 
                    string aInputMappingIdentifier, 
                    short aOutputMappingType, 
                    string aOutputMappingIdentifier, 
                    bool aOutputMappingStateful, 
                    string aOutputErrorXpathLoc, 
                    bool aDeleteInputXmlFromDisk, 
                    bool aAddInputsToDb, 
                    bool aAddResultsToDb, 
                    bool aProcessAsync, 
                    object userState) {
            if ((this.ProcessRequestCustomFromDiskOperationCompleted == null)) {
                this.ProcessRequestCustomFromDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestCustomFromDiskOperationCompleted);
            }
            this.InvokeAsync("ProcessRequestCustomFromDisk", new object[] {
                        aXMLInput,
                        aXMLInputTag,
                        aXMLResult,
                        aAddRoot,
                        aAddInputs,
                        aAddHeading,
                        aAddResultDesc,
                        aAddResultThatAreEmpty,
                        aAddWorksheet,
                        aDoDebugOutput,
                        aDisableCache,
                        aTargetEnvironment,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion,
                        aUseResultEncoding,
                        aUseResultDefinition,
                        aInputMappingType,
                        aInputMappingIdentifier,
                        aOutputMappingType,
                        aOutputMappingIdentifier,
                        aOutputMappingStateful,
                        aOutputErrorXpathLoc,
                        aDeleteInputXmlFromDisk,
                        aAddInputsToDb,
                        aAddResultsToDb,
                        aProcessAsync}, this.ProcessRequestCustomFromDiskOperationCompleted, userState);
        }
        
        private void OnProcessRequestCustomFromDiskOperationCompleted(object arg) {
            if ((this.ProcessRequestCustomFromDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRequestCustomFromDiskCompleted(this, new ProcessRequestCustomFromDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearCacheItem([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aLOB, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aCompanyId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int aProgramId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] float aProgramVersion) {
            this.Invoke("ClearCacheItem", new object[] {
                        aTargetEnvironment,
                        aType,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion});
        }
        
        /// <remarks/>
        public void ClearCacheItemAsync(string aTargetEnvironment, short aType, int aLOB, int aCompanyId, int aProgramId, float aProgramVersion) {
            this.ClearCacheItemAsync(aTargetEnvironment, aType, aLOB, aCompanyId, aProgramId, aProgramVersion, null);
        }
        
        /// <remarks/>
        public void ClearCacheItemAsync(string aTargetEnvironment, short aType, int aLOB, int aCompanyId, int aProgramId, float aProgramVersion, object userState) {
            if ((this.ClearCacheItemOperationCompleted == null)) {
                this.ClearCacheItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearCacheItemOperationCompleted);
            }
            this.InvokeAsync("ClearCacheItem", new object[] {
                        aTargetEnvironment,
                        aType,
                        aLOB,
                        aCompanyId,
                        aProgramId,
                        aProgramVersion}, this.ClearCacheItemOperationCompleted, userState);
        }
        
        private void OnClearCacheItemOperationCompleted(object arg) {
            if ((this.ClearCacheItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCacheItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string QueryAvailableEnvironments() {
            object[] results = this.Invoke("QueryAvailableEnvironments", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAvailableEnvironmentsAsync() {
            this.QueryAvailableEnvironmentsAsync(null);
        }
        
        /// <remarks/>
        public void QueryAvailableEnvironmentsAsync(object userState) {
            if ((this.QueryAvailableEnvironmentsOperationCompleted == null)) {
                this.QueryAvailableEnvironmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAvailableEnvironmentsOperationCompleted);
            }
            this.InvokeAsync("QueryAvailableEnvironments", new object[0], this.QueryAvailableEnvironmentsOperationCompleted, userState);
        }
        
        private void OnQueryAvailableEnvironmentsOperationCompleted(object arg) {
            if ((this.QueryAvailableEnvironmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAvailableEnvironmentsCompleted(this, new QueryAvailableEnvironmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveMapping([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aTargetEnvironment, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aFileName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string aStyleData, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] short aType) {
            this.Invoke("SaveMapping", new object[] {
                        aTargetEnvironment,
                        aFileName,
                        aStyleData,
                        aType});
        }
        
        /// <remarks/>
        public void SaveMappingAsync(string aTargetEnvironment, string aFileName, string aStyleData, short aType) {
            this.SaveMappingAsync(aTargetEnvironment, aFileName, aStyleData, aType, null);
        }
        
        /// <remarks/>
        public void SaveMappingAsync(string aTargetEnvironment, string aFileName, string aStyleData, short aType, object userState) {
            if ((this.SaveMappingOperationCompleted == null)) {
                this.SaveMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMappingOperationCompleted);
            }
            this.InvokeAsync("SaveMapping", new object[] {
                        aTargetEnvironment,
                        aFileName,
                        aStyleData,
                        aType}, this.SaveMappingOperationCompleted, userState);
        }
        
        private void OnSaveMappingOperationCompleted(object arg) {
            if ((this.SaveMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getErrorMessage() {
            object[] results = this.Invoke("getErrorMessage", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getErrorMessageAsync() {
            this.getErrorMessageAsync(null);
        }
        
        /// <remarks/>
        public void getErrorMessageAsync(object userState) {
            if ((this.getErrorMessageOperationCompleted == null)) {
                this.getErrorMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetErrorMessageOperationCompleted);
            }
            this.InvokeAsync("getErrorMessage", new object[0], this.getErrorMessageOperationCompleted, userState);
        }
        
        private void OngetErrorMessageOperationCompleted(object arg) {
            if ((this.getErrorMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getErrorMessageCompleted(this, new getErrorMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getDefaultPath() {
            object[] results = this.Invoke("getDefaultPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDefaultPathAsync() {
            this.getDefaultPathAsync(null);
        }
        
        /// <remarks/>
        public void getDefaultPathAsync(object userState) {
            if ((this.getDefaultPathOperationCompleted == null)) {
                this.getDefaultPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefaultPathOperationCompleted);
            }
            this.InvokeAsync("getDefaultPath", new object[0], this.getDefaultPathOperationCompleted, userState);
        }
        
        private void OngetDefaultPathOperationCompleted(object arg) {
            if ((this.getDefaultPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefaultPathCompleted(this, new getDefaultPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://com.oracle.ins.ru.sr.ui.webservices", ResponseNamespace="http://com.oracle.ins.ru.sr.ui.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getVersion() {
            object[] results = this.Invoke("getVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionAsync() {
            this.getVersionAsync(null);
        }
        
        /// <remarks/>
        public void getVersionAsync(object userState) {
            if ((this.getVersionOperationCompleted == null)) {
                this.getVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionOperationCompleted);
            }
            this.InvokeAsync("getVersion", new object[0], this.getVersionOperationCompleted, userState);
        }
        
        private void OngetVersionOperationCompleted(object arg) {
            if ((this.getVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionCompleted(this, new getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessIBCompletedEventHandler(object sender, ProcessIBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessIBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessIBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessRequestCompletedEventHandler(object sender, ProcessRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ReceiveAsyncRequestCompletedEventHandler(object sender, ReceiveAsyncRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveAsyncRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveAsyncRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessRequestFromDiskCompletedEventHandler(object sender, ProcessRequestFromDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRequestFromDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRequestFromDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessRequestFromDbCompletedEventHandler(object sender, ProcessRequestFromDbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRequestFromDbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRequestFromDbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessCustomCompletedEventHandler(object sender, ProcessCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessRequestCustomCompletedEventHandler(object sender, ProcessRequestCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRequestCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRequestCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessRequestCustomFromDiskCompletedEventHandler(object sender, ProcessRequestCustomFromDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRequestCustomFromDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRequestCustomFromDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ClearCacheItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void QueryAvailableEnvironmentsCompletedEventHandler(object sender, QueryAvailableEnvironmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAvailableEnvironmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryAvailableEnvironmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SaveMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void getErrorMessageCompletedEventHandler(object sender, getErrorMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getErrorMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getErrorMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void getDefaultPathCompletedEventHandler(object sender, getDefaultPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefaultPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefaultPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void getVersionCompletedEventHandler(object sender, getVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591